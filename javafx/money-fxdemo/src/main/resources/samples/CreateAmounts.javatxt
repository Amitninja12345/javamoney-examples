package samples;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import javax.money.CurrencyUnit;
import javax.money.MonetaryAmount;

import net.java.javamoney.ri.core.IntegralMoney;
import net.java.javamoney.ri.core.Money;
import net.java.javamoney.ri.core.MoneyCurrency;

/**
 * Sample snippets for creating amounts.
 */
public class CreateAmounts {
	/**
	 * Simplest case create an amount using a default unspecific factory.
	 */
	public void usingDefaultFactory() {
		MonetaryAmount amount = MonetaryAmounts.getAmountFactory().setCurrency("USD").setNumber(1234566.15).create;
	}

	/**
	 * Create an amount using an explicit typed factory.
	 */
	public void usingExplicitFactory() {
		CurrencyUnit currency = MonetaryCurrencies.getCurrency("myCode");
		Money amount = MonetaryAmounts.getAmountFactory(Money.class).setCurrency("USD").setNumber(1234566.15).create;
	}

	/**
	 * Using direct instantiation of type (not API).
	 */
	public void usingDirectInstantiation() {
		MonetaryAmount amount = Money.of("USD", 1234566.15);
		MonetaryAmount amount2 = FastMoney.of("USD", 1234567.15);
	}

}
