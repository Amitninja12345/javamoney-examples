package samples;

import java.util.List;
import java.util.Map;

import javax.money.CurrencyUnit;
import javax.money.MonetaryAmount;
import javax.money.convert.CurrencyConverter;
import javax.money.ext.AmountUtils;
import javax.money.provider.Monetary;

import net.java.javamoney.ri.core.Money;
import net.java.javamoney.ri.core.MoneyCurrency;

/**
 * Sample snippets for accessing and creating currencies on platform level.
 */
public class Extensions {

	/**
	 * Shows usage of AmountUtils exensions.
	 */
	public MonetaryAmount calculateMin(MonetaryAmount... amounts) {
		return Monetary.getExtension(AmountUtils.class).min(amounts);
	}
	
	/**
	 * Shows usage of AmountUtils exensions.
	 */
	public Map<CurrencyUnit,MonetaryAmount> calculateTotals(Collection amounts) {
		AmountUtils utils = Monetary.getExtension(AmountUtils.class);
		Map<CurrencyUnit, List<MonetaryAmount>> amountsSplitted = utils.separateCurrencies(amounts);
		Map<CurrencyUnit,MonetaryAmount> result = new HashMap<CurrencyUnit,MonetaryAmount>();
		for (Map.Entry<CurrencyUnit, List<MonetaryAmount>> entry : amountsSplitted.entrySet()) {
			result.put(enty.getKey(), utils.total(entry.getValue()));
		}
		return result;
	}
}
