package samples;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import javax.money.CurrencyUnit;
import javax.money.MonetaryAmount;

import net.java.javamoney.ri.core.IntegralMoney;
import net.java.javamoney.ri.core.Money;
import net.java.javamoney.ri.core.MoneyCurrency;

/**
 * Sample snippets for creating amounts.
 */
public class CreateAmounts {
	/**
	 * Simplest case create an amount with an ISO currency.
	 */
	public void forISOCurrencies() {
		MonetaryAmount amount = Money.of("USD", 1234566.15);
	}

	/**
	 * Create an amount using a custom currency (note the currency must be defined/cached in
	 * MonetaryCurrency, that this works.
	 */
	public void forCustomCurrencies() {
		CurrencyUnit currency = MoneyCurrency.of("myNamespace", "myCode");
		MonetaryAmount amount = Money.of(currency, 1234566.15);
	}

	/**
	 * Using and distinguishing different numeric implementations.
	 */
	public void usingDifferentImplementations() {
		MonetaryAmount amount = Money.of("USD", 1234566.15);
		Class<?> numericType = amount.getNumberType(); // BigDecimal in this
														// case
		
		MonetaryAmount amount2 = IntegralMoney.of("USD", 1234567.15);
		Class<?> numericType2 = amount2.getNumberType(); // Long in this case
	}

	/**
	 * Instantiating using different numeric inputs.
	 */
	public void usingDifferentInputs() {
		Money.of("USD", 1234566.15); // float (auotboxing)
		Money.of("USD", 1234566.15d); // double (auotboxing)
		Money.of("USD", 1234566); // int (auotboxing)
		Money.of("USD", 1234566L); // long (auotboxing)
		Money.of("USD", BigDecimal.ONE); // BigDecimal
		Money.of("USD", (short) 1234566); // short (auotboxing)
		Money.of("USD", (byte) 15); // byte (auotboxing)
		Money.of("USD", Long.valueOf(12345L)); // Long wrapper class
	}

	/**
	 * Implying numeric precision on Money, by providing a MathContext.
	 */
	public void implyingNumericPrecision() {
		// With Money, use BigDecimal, it will be reused internally
		// e.g. use a custom one
		Money.of("USD", 12345L, new MathContext(100, RoundingMode.HALF_UP));
		// or a predefined one
		Money.of("EUR", 12345L, MathContext.DECIMAL128);
		
		// Additionally Money allows you to change the context during runtime!
		Money money = Money.of("CHF", 123456.12345d, MathContext.DECIMAL128);
		money.setMathContext(MathContext.DECIMAL64);
	}
}
